apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "applicationId"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            signingConfig getSignInfo("../sign.properties");
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
    }

    //配置自定义打包名称
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName = "Application_${variant.mergedFlavor.versionName}_${variant.buildType.name}.apk"
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }

    //变种
    productFlavors {
        flavor1 {
            applicationId "flavor1.id"
            buildConfigField("String", "FIELD", "\"...\"")
            versionName "1.0"
        }
        flavor2 {
            applicationId "flavor2.id"
            buildConfigField("String", "FIELD", "\"...\"")
            versionName "1.0"
        }
    }
}


//获取签名信息
import com.android.build.gradle.internal.dsl.SigningConfig
def getSignInfo(propFileName) {
    def SigningConfig signingConfig = new SigningConfig("signInfo")
    File propFile = file(propFileName);
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        signingConfig.storeFile = file(props['STORE_FILE'])
        signingConfig.storePassword = props['STORE_PASSWORD']
        signingConfig.keyAlias = props['KEY_ALIAS']
        signingConfig.keyPassword = props['KEY_PASSWORD']
        println('signConfig is exits')
    } else {
        println('sign config is null')
        signingConfig = null
    }
    return signingConfig;
}

dependencies {
    ...
}
